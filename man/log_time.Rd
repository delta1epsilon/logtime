% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/log_time.R
\name{log_time}
\alias{log_time}
\title{Track time of code execution}
\usage{
log_time(message, level = 'DEBUG') \%<\% \{
   expression
\}
}
\arguments{
\item{message}{A string describing context of code. Can't be empty.}

\item{level}{A logging level. One of 'DEBUG', 'INFO', 'WARNING', 'ERROR'. Default is DEBUG.}
}
\value{
Start and End messages. Execution time is appended to the End message.
}
\description{
Track time of code execution in easy, efficient and nice looking way
}
\details{
\code{log_time} has special call that requires using pipe operator  \code{\link{\%<\%}}.

\code{log_time} can handle nested calls and returns execution times of nested parts as well as overall execution time.
 Besides, it makes script much more organized and readable.

By default, \code{log_time} will print messages to console. This can be overwritten by \code{configure_logging} or, if used inside logger context, by \code{create_logger} function.
}
\examples{

# create a logtime with message 'Some text';
# default level is DEBUG
log_time('Some text') \%<\% {
   Sys.sleep(1)
}
# output:
# 2016-09-21 10:54:31 - DEBUG - [Start] - [Some text]
# 2016-09-21 10:54:32 - DEBUG - [End  ] - [Some text] - [Done in 1 sec. (0 min.)]


# create the same logtime with changed level to INFO
log_time('Some text', level = 'INFO') \%<\% {
   Sys.sleep(1)
}
# output:
# 2016-09-21 10:53:20 - INFO - [Start] - [Some text]
# 2016-09-21 10:53:21 - INFO - [End  ] - [Some text] - [Done in 1 sec. (0 min.)]

}
\seealso{
\code{\link{create_logger}}, \code{\link{\%<\%}}
}

